import streamlit as st
import cv2
from ultralytics import YOLO
from PIL import Image
import numpy as np
import tempfile

# Load your model
model = YOLO('best.pt')

# result = model.predict(source='source_files/', save=True, show=True)

# Function to process the frame and perform predictions
def process_frame(frame):
    results = model.predict(source=frame, save=False, show=False)
    for result in results:
        boxes = result.boxes
        for box in boxes:
            coords = box.xyxy[0].tolist()
            x1, y1, x2, y2 = int(coords[0]), int(coords[1]), int(coords[2]), int(coords[3])
            cls = int(box.cls.item())
            conf = box.conf.item()
            label = f'{cls}: {conf:.2f}'
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
    return frame

# Streamlit App
st.title('YOLO Object Detection')
st.write('Upload an image or video and the model detects the objects and shows the output.')

uploaded_file = st.file_uploader("Choose an image or video...", type=["jpg", "jpeg", "png", "mp4", "avi", "mov"])

if uploaded_file is not None:
    # If the uploaded file is an image
    if uploaded_file.type in ["image/jpg", "image/jpeg", "image/png"]:
        image = Image.open(uploaded_file)
        frame = np.array(image)
        processed_frame = process_frame(frame)
        st.image(processed_frame, caption='Processed Image', use_column_width=True)

    # If the uploaded file is a video
    elif uploaded_file.type in ["video/mp4", "video/avi", "video/mov"]:
        tfile = tempfile.NamedTemporaryFile(delete=False)
        tfile.write(uploaded_file.read())
        cap = cv2.VideoCapture(tfile.name)
        stframe = st.empty()

        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            processed_frame = process_frame(frame)
            stframe.image(processed_frame, channels="BGR")

        cap.release()
